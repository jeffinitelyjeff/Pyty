 ---------------------------------------------------------------------------
 STATEMENT CHECKING FUNCTIONS ----------------------------------------------
 ---------------------------------------------------------------------------
   Valid statement types are:
   = Done ------------------------------------------------------------------
    - Assign(expr* targets, expr value)
    - If(expr test, stmt* body, stmt* orelse)
    - While(expr test, stmt* body, stmt* orelse)
   = To Do -----------------------------------------------------------------
    - FunctionDef(identifier name, arguments args, stmt* body, expr*
       decorator_list)
    - ClassDef(identifier name, expr* bases, stmt* body, expr* decorator_list)
    - Return(expr? value)
    - Delete(expr* targets)
    - AugAssign(expr target, operator op, expr value)
    - For(expr test, expr iter, stmt* body, stmt* orelse)
    - With(expr context_expr, expr? optional_vars, stmt* body)
    - Raise(expr? type, expr? inst, expr? tback)
    - TryExcept(stmt* body, excepthandler* handlers, stmt* orelse)
    - TryFinally(stmt* body, stmt* finalbody)
    - Assert(expr test, expr? msg)
    - Import(alias* names)
    - ImportFrom(identifier? module, alias* names, int? level)
    - Print(expr? dest, expr* values, bool nl)
    - Pass
    - Break
    - Continue






Basic Architecture
==================
-src/
|--parser.py <-- helper functions for parsing file and traversing AST.
|--typecheck.py <-- checks against typechecking rules.
|--pyty.py <-- command line interface for running typecheck.
|--test/
   |--parser_tests.py <-- unit testing of parser.py file.
   |--pyty_tests_core.py <-- core of typecheck unit testing unit tests for
   |--                       each file
   |--generate_tests.py <-- script which inserts a unit test into
   |--                      pyty_test_core.py for each file in the     
   |--                      test_file/ dir and outputs it as pyty_tests.py
   |--test_files/
      |--one_line*.py <-- source code snippets to unit test.
            

Goals for First Run
===================
Create typechecking system for small subset of Python language (ie, numbers,
bools, binary ops, control flow), chosen as a subset of Python's Abstract 
Syntax Tree's abstract grammar. Types will be defined in epydoc docstrings, and
the PyTy type checker will use epydoc to parse the docstrings and look for
apporpriate type definitions for every variable instantiated.

Current Goal for Node Hierarchy
===============================

Note: There seems to be considerable (and confusing) difference between th
edocumentation on ASTs and the actual module, so the following specification
will be taken loosely. For instance, in the AST documentation it mentions that
there are 5 builtin types (identifiers, int, string, object, bool), but there
does not seem to be any way to trace in the documentation how an expr is ever
classified as an int, string, or bool. Also, there seems to be no mention of
any type for module when actually querying AST objects; the AST is just
stored as a list of statements. I'm not sure at this point whether this is
going to cause any issues down the road.

mod
---
- Module(stmt* body)
- Expression(expr body)

stmt
----
- For(expr target, expr iter, stmt* body, stmt* orelse)
- Assign(expr* targets, expr value)
- Expr(expr value)

expr
----
- BoolOp(boolop op, expr* values)
- BinOp(expr left, operator op, expr right)

boolop
------
- And
- Or

operator
--------
- Add
- Sub
- Mult
- Div
- Mod

literals
--------
int
bool

Old Goal for Type Hierarchy
===========================

stmt
----
- For(expr target, expr iter, stmt* body, stmt* orelse)
- While(expr test, stmt* body, stmt* orelse)
- If(expr test, stmt* body, stmt* orelse)
- Expr(expr value)

expr
----
- BoolOp(boolop op, expr* values)
- BinOp(expr left, operator op, expr right)
- UnaryOp(unaryop op, expr operand)
- IfExp(expr test, expr body, expr orelse)
- Repr(expr value)
- Int(object n)
- True
- False

boolop
------
- And
- Or

operator
--------
- Add
- Sub
- Mult
- Div
- Mod

unaryop
-------
- Invert
- Not
- Uadd (this is like in x = +5)
- Usub (this is like in x = -5)


Typechecking "Rules"
====================

- BinOp(expr left, operator op, expr right) typechecks as an expr if left,
  op, and right have their correct types.
- BoolOp(boolop op, expr* values) typechecks as an expr if op and values have
  their correct types. 
- Seems really basic and self-explanatory from the AST definitions...

Important Links
===============
Python Abstract Syntax Tree Module - http://docs.python.org/library/ast.html
Epydoc Epytext Parser - http://epydoc.sourceforge.net/api/epydoc.markup.epytext-module.html



