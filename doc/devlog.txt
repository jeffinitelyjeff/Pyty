5-5-2011
========


4-27-2011
=========
- Converted to git, and kept log history (though not sure if it remembers the
  branches correctly, but I guess that doesn't even really matter). Here are the
  steps that were necessary to convert, which required installing the
  bzr-fastimport package (adapted from the top comment on
  http://fthieme.net/en/drupal6/node/77):
 
  1. git init project-git; cd project-git
  2. bzr fast-export.py --export-marks=.git/bzr.mark /path/to/project-bzr | git
  fast-import --import-marks=.git/git.mark --export-marks=.git/git.mark
  
- Added project to github at github.com/jruberg/Pyty

  

4-21-2011
=========
- Working on subscripts (ie, l = [1,2,3]; l[0]). Lists will be fine, but for
  tuples I need to know what index it's referring to, so tuple subscripts will
  only be able to accept number literals, which is a very annoying restriction
  on the language, but I don't see any way around it without entering halting
  problem land.
- I think allowing both Load and Store contexts in the check\_Subscript\_expr
  method should make subscripts generalizable to normal situations and
  assignment.
- Need to add some semblance of generic types in order to verify if a collection
  passed to check\_Subscript_\expr is a list or a tuple; not sure how to handle
  that.
+ Need to add ability to read tuples like (1,2,) to parser (right now it only
  likes commas on the end if it's a single-element tuple).

4-14-2011
=========
- Finished type specification pasrer generator using LEPL. It was a pain to get
  working corcetly, but it was really satisfying to get working exactly as I
  wanted, and the code for the parser is now really succint and clear (as
  opposed to coding up the logic of a parser).
  

2-23-2011
=========
- Is it okay practice to use assert statements?

2-8-2011
========
- Should possibly include some data structure to track when typecheck starts
  failing? Not sure

12-17-2010
==========
- What's the point of having a for target be an expression? Shouldn't it just
  be a variable identifier?

12-2-2010
=========
- Boolean operators are stored oddly. The expression "a and b and c" is stored
  as one boolean operation, but the expression "a and b or c" is stored as the
  or boolean operation applied to "a and b" and "c" (because and has
  precedence). Note: apparently I'm stupid and BoolOp was never specified as a
  binary operation. This really doesn't make things any more complicated; we
  just need to check that all the values typecheck as bools.
- Just realized the way I check things with &='s is probably not ideal: this
  will only say a general "true" or "false," but I want to eventually be able
  to say which thing specifically doesn't typecheck to make this at all
  user-friendly.
* Wondering whether test files should specify the errors they should create,
  like "### VariableTypeUnspecifiedError"
* Should talk about what kind of test cases to create.
* Why does adding functions work..?

12-1-2010
=========
- According to the compiler documentation, there should be an ast.Stmt type,
  but there doesn't seem to actually be one. Not sure how this is going to
  affect me, since I'll be creating my own PytyStmt type.
- According to all documentation, there should be a distinct case for when a
  module is just a single expression. Instead, the actual AST code seems to
  implement this just as the single expression being the only element in a
  list of statements.


11-28-2010
==========
- How to deal with things in test/ needing access to things in the directory
  above?
- Can't remember what Danner suggested to use for checking types of AST 
  nodes...
- Using http://code.activestate.com/recipes/52558/ as a reference for the
  singleton pattern.
- Werid directory structure error:

jruberg@wisdom:~/code/pyty/trunk$ cd src/
jruberg@wisdom:~/code/pyty/trunk/src$ python
Python 2.6.6 (r266:84292, Sep 15 2010, 15:52:39) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import compiler
>>> compiler.parse("typecheck.py")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/usr/lib/python2.6/compiler/transformer.py", line 51, in parse
    return Transformer().parsesuite(buf)
  File "/usr/lib/python2.6/compiler/transformer.py", line 128, in parsesuite
    return self.transform(parser.suite(text))
AttributeError: 'module' object has no attribute 'suite'
>>> quit()
jruberg@wisdom:~/code/pyty/trunk/src$ cd test
jruberg@wisdom:~/code/pyty/trunk/src/test$ python
Python 2.6.6 (r266:84292, Sep 15 2010, 15:52:39) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import compiler
>>> compiler.parse("pyty_tests.py")
Module(None, Stmt([Discard(Getattr(Name('pyty_tests'), 'py'))]))


11-19-2010
==========
- Wondering what to do for typechecks with identical structure; for the sake
  of not making redundant code, it seems like I should just check if a node is
  an add, sub, or mult node and then do the same thing for each, but this
  seems to violate the spirit of typechecking rules.
- On that note, really need to start typing up typechecking rules.
- Better name than VariableTypeUnspecifiedError?
* Not sure what to do about binary operators... the AST stores a binary
  operation as a binop node, with an op field that distinguishes it as a
  specific operation. should I essentially ignore that organization and say
  "if it's a binop node, then do this if it's add,sub,mult or do this if it's
  div or do this if it's mod"? this is trivial at this stage, since I'm only
  concerning myself with ints, and all binops have the same typechecking
  rules when only ints are considered.

11-12-2010
==========
- Had issues with bzr and pull causing conflicts even though I was just
  pulling onto an earlier revision, but maybe that was a fluke. Had more
  issues because I'd gone a while without committing and then only committed
  after accidentally deleting the contents of the file I'd worked on. That
  should be all fixed now, though.
- Wondering whether, instead of just adding text into pyty_tests, there should
  be something like a pyty_tests_core and a 'compiled' version that includes
  the unit tests but isn't included in version control.

11-5-2010
=========
- Split up unit tests on a per-line basis. I think this is the correct
  approach to use for them, but we'll see.
* Asserting that a typecheck fails is slightly more complicated than I thought
  it'd be. typecheck() either throws an UnsatisfactoryEnvironment error or a
  DoesNotTypecheck error, so I'd want unit tests which check if typecheck()
  raises UnsatisfactoryEnvironment or DoesNotTypecheck errors based on the
  context. assertRaises seems like the obvious choice, but assertRaises does
  not fail if a different error is raised, which is the behavior I want. I
  think this is easily fixed with try...except blocks, but I think that kind
  of defeats the purpose. I've implemented it this way for test_line_5, but it
  seems hackish to have to uncoditionally fail and include an error message.
- Realized that having z = x + y and z = a + x both in tested code was
  slightly more complicated than intended.
* With the way I've set up unit tests so far, it seems a little artificial to
  test for UnsatisfactoryEnvironment errors since I build up the environment
  in each case... Instead of building up the environment for lines 4 and 5
  myself, should I typecheck the appropriate lines to get the environments?
  Even that still feels artificial, if I'm telling it which lines to
  typecheck; should there be a "search for type definition" function? What
  would such a function do? Would it be as simple as checking if it's in the
  list of nodes defined with types in epydoc or wherever it appears on the
  left side of an assignment?
= Danner answered all these questions. Unit tests should be based on
  files of source code snippets. The way I was planning to implement type
  checking was making things much more complicated than they should be, and
  was encroaching on type inference.

11-4-2010
=========
- Decided to make typecheck() return a type value, and then will make a helper
  function which adds that type to the environment dictionary.
- Unsure about whether to make two different error cases for whether the
  incorrect typing occurs at the root node for the AST or in some subtree.
  Actually, that can be stored as data in the DoesNotTypecheck exception.
* Wondering whether environments can change with time, and how that would
  complicate things... It seems like something I should consider, but also
  something that would only arise due to bad practice (using a variable for one
  type in one place, and then for another type in another place). Then again,
  it should arise whenever using looping or local dummy variables, so it does
  seem like a real issue. Now wondering how to handle that... I think it is
  handled implicitly by passing around an environment which is morphed with
  each call of typecheck, since it seems like there should be a unique
  environment for each AST node, but then there are issues of backtracking and
  removing elements from the environment...
* Now wondering what exactly I want an environment to be. Before, I was going
  off the normal definiton of environment, mapping variables to types, but
  then I realized that I don't just want to be keeping track of variables. Say
  that I'm typechecking y = 3*(5+4); when typechecking the assignment
  operator, don't I want the environment to be some mapping showing that
  3*(5+4) is an int; when typechecking the * operator, don't I want the
  environment to be some mapping showing that 3 is an int and 5+4 is an int?
  So do I need to create some way to index AST nodes; that is, do I need to
  find some way to identify 3*(5+4) and 5+4? I could add a field to each AST
  node that is just some distinct integer... If an environment maps an AST
  node to a type, not a variable name to a type, then the previous * is pretty
  much irrelevent.

11-3-2010
=========
- Suffering grave consequences from taking time off from working on this 
  project. Have forgotten some details from my discussion with Danner on 10/22.
  I remember there was some discussion about what types an environment 
  dictionary should store; for now, I'm going to naively assume both variable 
  names and type names should be stored as strings, though I recall there was 
  some discussion about type names possibly being stored as an enumerated type
  or some class structure. I envision this won't be terribly detrimental until
  I start to consider subtyping.
- I am also afraid that we talked about the typechecking function having 3
  parameters, not 2, and am afraid I'm forgetting something...
- Just realized that typecheck() should possbily return an environment, not a
  boolean, assuming it typechecks properly, and should throw a DoesNotTypecheck
  error if it doesn't typecheck. that way typecheck() itself could be used to build up
  the environment.

10-21-2010
==========
When trying to write unit tests for the typechecking rules, starting to run into
the issue of not really knowing how the program is going to be organized -- what
kind of interface should the program have for the unit testing to call upon?
Interface is something I hadn't thought about until now; might have to ask
Danner for help with where to start.
How will type information be stored? When I check whether an invert expression
typechecks, it can't just refer to the AST for its expr argument and recurse 
down until it can determine its type; that would be type inference, not type
checking. I need to store some kind of parsing information -- like, "I've looked
at these variables and determined that they are this type." I think I can
achieve this by simply adding a "type" instance variable to each node object.
But then where does this fit in to unit testing? My idea is this: have a parse
function which takes an AST and inserts type information into it, then each unit
test could just call the parse function on the node it's interested in (so the
invert unit test would call it on the AST subtree beginning at the invert node);
but then wouldn't every unit test become an almost trivial 
assertTrue(parse(...)) or assertFalse(parse(...)), assuming parse returns a
boolean representing if it typechecked successfully? Maybe that isn't a problem. 

10-19-2010
==========
Looked more into how assignments are managed in an AST. Started trying to
generate a list of all variables assigned values, so I can eventually use that
list to look in the docstrings to gather type information to check against.
Docstrings that aren't available from the AST module shouldn't be hard to find,
since I'll have access to line numbers. Not at a stage to test yet, still trying
to get basic functions running (after which I'll make tests). Having lots of
trouble parsing files in other directories: Python keeps throwing
"AttributeError: 'module' object has no attribute 'suite" from code in the
compiler class.


